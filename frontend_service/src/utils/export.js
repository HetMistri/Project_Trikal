// Export utilities
export const exportUtils = {
  // Export analysis data as JSON
  exportAsJSON(data, filename = "analysis") {
    const jsonString = JSON.stringify(data, null, 2);
    this.downloadFile(jsonString, `${filename}.json`, "application/json");
  },

  // Export analysis data as CSV
  exportAsCSV(data, filename = "analysis") {
    const csvContent = this.convertToCSV(data);
    this.downloadFile(csvContent, `${filename}.csv`, "text/csv");
  },

  // Convert analysis data to CSV format
  convertToCSV(data) {
    const headers = [
      "Timestamp",
      "Latitude",
      "Longitude",
      "Address",
      "Elevation",
      "Terrain",
      "Confidence",
      "Landslide Risk",
      "Earthquake Risk",
      "Flooding Risk",
      "Erosion Risk",
    ];

    const rows = [headers.join(",")];

    if (Array.isArray(data)) {
      data.forEach((item) => {
        const row = [
          item.timestamp,
          item.coordinates?.lat || "",
          item.coordinates?.lng || "",
          `"${item.address || ""}"`,
          item.elevation || "",
          item.terrain || "",
          item.confidence || "",
          item.analysis?.riskAssessment?.landslide || "",
          item.analysis?.riskAssessment?.earthquake || "",
          item.analysis?.riskAssessment?.flooding || "",
          item.analysis?.riskAssessment?.erosion || "",
        ];
        rows.push(row.join(","));
      });
    } else {
      const row = [
        data.timestamp,
        data.coordinates?.lat || "",
        data.coordinates?.lng || "",
        `"${data.address || ""}"`,
        data.elevation || "",
        data.terrain || "",
        data.confidence || "",
        data.analysis?.riskAssessment?.landslide || "",
        data.analysis?.riskAssessment?.earthquake || "",
        data.analysis?.riskAssessment?.flooding || "",
        data.analysis?.riskAssessment?.erosion || "",
      ];
      rows.push(row.join(","));
    }

    return rows.join("\n");
  },

  // Download file helper
  downloadFile(content, filename, contentType) {
    const blob = new Blob([content], { type: contentType });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");

    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();

    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  },

  // Generate report content
  generateReport(data) {
    const report = `
# Geological Analysis Report

**Generated:** ${new Date().toLocaleString()}
**Location:** ${data.address || "Unknown"}
**Coordinates:** ${data.coordinates?.lat}, ${data.coordinates?.lng}
**Confidence:** ${data.confidence}%

## Location Details
- **Elevation:** ${data.elevation}m
- **Terrain:** ${data.terrain}
- **Climate:** ${data.climate}

## Geological Composition
${
  data.analysis?.geological?.composition
    ?.map((comp) => `- ${comp}`)
    .join("\n") || "N/A"
}

## Risk Assessment
${Object.entries(data.analysis?.riskAssessment || {})
  .map(
    ([risk, level]) =>
      `- **${risk.charAt(0).toUpperCase() + risk.slice(1)}:** ${level}`
  )
  .join("\n")}

## Recommendations
${data.analysis?.recommendations?.map((rec) => `- ${rec}`).join("\n") || "N/A"}

---
*Generated by Project Trikal v1.0.0*
    `;

    return report;
  },

  // Export as PDF (would need a PDF library in real implementation)
  exportAsPDF(data, filename = "analysis") {
    // This would use a library like jsPDF or similar
    console.log("PDF export would be implemented with a PDF library");

    // For now, export as text
    const report = this.generateReport(data);
    this.downloadFile(report, `${filename}.txt`, "text/plain");
  },
};
